diff --git a/library/std/src/gc.rs b/library/std/src/gc.rs
index c4d505176ca..a12c9c35122 100644
--- a/library/std/src/gc.rs
+++ b/library/std/src/gc.rs
@@ -381,7 +381,7 @@ pub unsafe fn new_unsynchronised(value: T) -> Self {
     #[cfg(not(no_global_oom_handling))]
     unsafe fn new_internal(value: T) -> Self {
         #[cfg(not(bootstrap))]
-        if !crate::mem::needs_finalizer::<T>() {
+        if !crate::mem::needs_drop::<T>() {
             return Self::from_inner(Box::leak(Box::new_in(GcBox { value }, GcAllocator)).into());
         }
 
diff --git a/compiler/rustc_mir_transform/src/lib.rs b/compiler/rustc_mir_transform/src/lib.rs
index e590a80b441..8e5cac3f51c 100644
--- a/compiler/rustc_mir_transform/src/lib.rs
+++ b/compiler/rustc_mir_transform/src/lib.rs
@@ -616,8 +616,6 @@ fn o1<T>(x: T) -> WithMinOptLevel<T> {
             &multiple_return_terminators::MultipleReturnTerminators,
             &deduplicate_blocks::DeduplicateBlocks,
             &large_enums::EnumSizeOpt { discrepancy: 128 },
-            // Must come before CriticalCallEdges to prevent LLVM basic block ordering errors.
-            &remove_gc_drops::RemoveGcDrops,
             // Some cleanup necessary at least for LLVM and potentially other codegen backends.
             &add_call_guards::CriticalCallEdges,
             // Cleanup for human readability, off by default.
diff --git a/library/std/src/gc.rs b/library/std/src/gc.rs
index c4d505176ca..398de01103a 100644
--- a/library/std/src/gc.rs
+++ b/library/std/src/gc.rs
@@ -213,32 +213,6 @@ impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Gc<U>> for Gc<T> {}
 #[unstable(feature = "gc", issue = "none")]
 impl<T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<Gc<U>> for Gc<T> {}
 
-/// A compiler barrier to prevent finalizers running before the last reference to
-/// an object is dead.
-///
-/// The compiler is free to optimise away the stack or register location holding
-/// a GC reference if it's no longer used. This means that sometimes, at
-/// runtime, a reference is cleaned up earlier than its source-level lifetime to
-/// free up the register for something else. This is fine (and usually
-/// desirable!) because it doesn't have any observable difference in behaviour.
-///
-/// However, things get complicated when a garbage collector is involved. In
-/// very rare cases, this optimisation, followed by an unfortunately timed
-/// collection, may cause the value the reference points to to be freed earlier
-/// than expected - and thus finalized earlier than it should be. This can cause
-/// deadlocks, races, and even use-after-frees.
-///
-/// Adding a compiler barrier to `Gc`'s drop prevents the compiler from optimizing
-/// away the reference too soon. This is a special implementation with compiler
-/// support, because it is usually impossible to allow both `Drop` and `Copy`
-/// traits to be implemented on a type simultaneously.
-#[cfg(all(not(bootstrap), not(test)))]
-impl<T: ?Sized> Drop for Gc<T> {
-    fn drop(&mut self) {
-        keep_alive(self);
-    }
-}
-
 impl<T: ?Sized> Gc<T> {
     #[inline(always)]
     fn inner(&self) -> &GcBox<T> {
