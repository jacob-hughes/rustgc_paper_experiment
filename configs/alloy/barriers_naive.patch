diff --git a/library/std/src/gc.rs b/library/std/src/gc.rs
index c4d505176ca..a12c9c35122 100644
--- a/library/std/src/gc.rs
+++ b/library/std/src/gc.rs
@@ -381,7 +381,7 @@ pub unsafe fn new_unsynchronised(value: T) -> Self {
     #[cfg(not(no_global_oom_handling))]
     unsafe fn new_internal(value: T) -> Self {
         #[cfg(not(bootstrap))]
-        if !crate::mem::needs_finalizer::<T>() {
+        if !crate::mem::needs_drop::<T>() {
             return Self::from_inner(Box::leak(Box::new_in(GcBox { value }, GcAllocator)).into());
         }
 
diff --git a/compiler/rustc_mir_transform/src/lib.rs b/compiler/rustc_mir_transform/src/lib.rs
index e590a80b441..8e5cac3f51c 100644
--- a/compiler/rustc_mir_transform/src/lib.rs
+++ b/compiler/rustc_mir_transform/src/lib.rs
@@ -616,8 +616,6 @@ fn o1<T>(x: T) -> WithMinOptLevel<T> {
             &multiple_return_terminators::MultipleReturnTerminators,
             &deduplicate_blocks::DeduplicateBlocks,
             &large_enums::EnumSizeOpt { discrepancy: 128 },
-            // Must come before CriticalCallEdges to prevent LLVM basic block ordering errors.
-            &remove_gc_drops::RemoveGcDrops,
             // Some cleanup necessary at least for LLVM and potentially other codegen backends.
             &add_call_guards::CriticalCallEdges,
             // Cleanup for human readability, off by default.
