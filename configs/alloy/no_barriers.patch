From 31bea1366656bba4729e910488e162e9cf9ed109 Mon Sep 17 00:00:00 2001
From: Jake Hughes <jake@bencher16.soft-dev.org>
Date: Fri, 10 May 2024 11:17:10 +0100
Subject: [PATCH] no_barriers

---
 compiler/rustc_mir_transform/src/lib.rs |  1 -
 library/std/src/gc.rs                   | 30 -------------------------
 2 files changed, 31 deletions(-)

diff --git a/compiler/rustc_mir_transform/src/lib.rs b/compiler/rustc_mir_transform/src/lib.rs
index e590a80b441..dd5bbc3adfa 100644
--- a/compiler/rustc_mir_transform/src/lib.rs
+++ b/compiler/rustc_mir_transform/src/lib.rs
@@ -617,7 +617,6 @@ fn o1<T>(x: T) -> WithMinOptLevel<T> {
             &deduplicate_blocks::DeduplicateBlocks,
             &large_enums::EnumSizeOpt { discrepancy: 128 },
             // Must come before CriticalCallEdges to prevent LLVM basic block ordering errors.
-            &remove_gc_drops::RemoveGcDrops,
             // Some cleanup necessary at least for LLVM and potentially other codegen backends.
             &add_call_guards::CriticalCallEdges,
             // Cleanup for human readability, off by default.
diff --git a/library/std/src/gc.rs b/library/std/src/gc.rs
index 7af0e547c25..4dd6e9096c0 100644
--- a/library/std/src/gc.rs
+++ b/library/std/src/gc.rs
@@ -244,36 +244,6 @@ impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Gc<U>> for Gc<T> {}
 #[unstable(feature = "gc", issue = "none")]
 impl<T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<Gc<U>> for Gc<T> {}
 
-/// A compiler barrier to prevent finalizers running before the last reference to
-/// an object is dead.
-///
-/// The compiler is free to optimise away the stack or register location holding
-/// a GC reference if it's no longer used. This means that sometimes, at
-/// runtime, a reference is cleaned up earlier than its source-level lifetime to
-/// free up the register for something else. This is fine (and usually
-/// desirable!) because it doesn't have any observable difference in behaviour.
-///
-/// However, things get complicated when a garbage collector is involved. In
-/// very rare cases, this optimisation, followed by an unfortunately timed
-/// collection, may cause the value the reference points to to be freed earlier
-/// than expected - and thus finalized earlier than it should be. This can cause
-/// deadlocks, races, and even use-after-frees.
-///
-/// Adding a compiler barrier to `Gc`'s drop prevents the compiler from optimizing
-/// away the reference too soon. This is a special implementation with compiler
-/// support, because it is usually impossible to allow both `Drop` and `Copy`
-/// traits to be implemented on a type simultaneously.
-#[cfg(all(not(bootstrap), not(test)))]
-impl<T: ?Sized> Drop for Gc<T> {
-    fn drop(&mut self) {
-        unsafe {
-            // asm macro clobber by default, so this is enough to introduce a
-            // barrier.
-            core::arch::asm!("/* {0} */", in(reg) self);
-        }
-    }
-}
-
 impl<T: ?Sized> Gc<T> {
     #[inline(always)]
     fn inner(&self) -> &GcBox<T> {
-- 
2.39.2

