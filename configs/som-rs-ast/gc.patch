diff --git a/som-core/src/lib.rs b/som-core/src/lib.rs
index f3ef8f8..36f2ab8 100644
--- a/som-core/src/lib.rs
+++ b/som-core/src/lib.rs
@@ -2,6 +2,8 @@
 //! This crate contains common types that are useful to be shared across multiple tools when manipulating SOM-related things.
 //!
 
+#![feature(gc)]
+
 /// The SOM Abstract Syntax Tree definitions.
 pub mod ast;
 /// The SOM bytecode definitions.
diff --git a/som-interpreter-ast/Cargo.toml b/som-interpreter-ast/Cargo.toml
index 321ba48..da8e2a3 100644
--- a/som-interpreter-ast/Cargo.toml
+++ b/som-interpreter-ast/Cargo.toml
@@ -7,6 +7,10 @@ edition = "2018"
 publish = false
 license = "MIT OR Apache-2.0"
 
+
+[lib]
+doctest = false
+
 [dependencies]
 # internal
 som-core = { path = "../som-core", version = "0.1.0" }
diff --git a/som-interpreter-ast/README.md b/som-interpreter-ast/README.md
index e454856..dc64533 100644
--- a/som-interpreter-ast/README.md
+++ b/som-interpreter-ast/README.md
@@ -5,4 +5,4 @@ This is the interpreter for the Simple Object Machine.
 
 It is AST-based, in that it works by recursively traversing and evaluating nodes from the Abstract Syntax Tree from **`som-core`**.  
 
-Resources are managed and tracked through reference-counting (using Rust's **`Rc`**/**`Weak`** types).  
+Resources are managed and tracked through reference-counting (using Rust's **`Gc`**/**`Weak`** types).
diff --git a/som-interpreter-ast/src/class.rs b/som-interpreter-ast/src/class.rs
index c4d21e1..af2268d 100644
--- a/som-interpreter-ast/src/class.rs
+++ b/som-interpreter-ast/src/class.rs
@@ -1,24 +1,16 @@
 use std::cell::RefCell;
 use std::fmt;
-use std::rc::{Rc, Weak};
+use std::gc::Gc;
 
 use indexmap::IndexMap;
 
 use som_core::ast::{ClassDef, MethodBody};
+use std::gc::FinalizeUnchecked;
 
 use crate::method::{Method, MethodKind};
 use crate::primitives;
 use crate::value::Value;
-use crate::{SOMRef, SOMWeakRef};
-
-/// A reference that may be either weak or owned/strong.
-#[derive(Debug, Clone)]
-pub enum MaybeWeak<A> {
-    /// An owned reference.
-    Strong(SOMRef<A>),
-    /// A weak reference.
-    Weak(SOMWeakRef<A>),
-}
+use crate::SOMRef;
 
 /// Represents a loaded class.
 #[derive(Clone)]
@@ -26,14 +18,14 @@ pub struct Class {
     /// The class' name.
     pub name: String,
     /// The class of this class.
-    pub class: MaybeWeak<Class>,
+    pub class: Option<SOMRef<Class>>,
     /// The superclass of this class.
     // TODO: Should probably be `Option<SOMRef<Class>>`.
-    pub super_class: SOMWeakRef<Class>,
+    pub super_class: Option<SOMRef<Class>>,
     /// The class' locals.
-    pub locals: IndexMap<String, Value>,
+    pub locals: FinalizeUnchecked<IndexMap<String, Value>>,
     /// The class' methods/invokables.
-    pub methods: IndexMap<String, Rc<Method>>,
+    pub methods: FinalizeUnchecked<IndexMap<String, Gc<Method>>>,
     /// Is this class a static one ?
     pub is_static: bool,
 }
@@ -67,25 +59,25 @@ impl Class {
             instance_locals
         };
 
-        let static_class = Rc::new(RefCell::new(Self {
+        let static_class = Gc::new(RefCell::new(Self {
             name: format!("{} class", defn.name),
-            class: MaybeWeak::Weak(Weak::new()),
-            super_class: Weak::new(),
-            locals: static_locals,
-            methods: IndexMap::new(),
+            class: None,
+            super_class: None,
+            locals: unsafe { FinalizeUnchecked::new(static_locals) },
+            methods: unsafe { FinalizeUnchecked::new(IndexMap::new()) },
             is_static: true,
         }));
 
-        let instance_class = Rc::new(RefCell::new(Self {
+        let instance_class = Gc::new(RefCell::new(Self {
             name: defn.name.clone(),
-            class: MaybeWeak::Strong(static_class.clone()),
-            super_class: Weak::new(),
-            locals: instance_locals,
-            methods: IndexMap::new(),
+            class: Some(static_class),
+            super_class: None,
+            locals: unsafe { FinalizeUnchecked::new(instance_locals) },
+            methods: unsafe { FinalizeUnchecked::new(IndexMap::new()) },
             is_static: false,
         }));
 
-        let mut static_methods: IndexMap<String, Rc<Method>> = defn
+        let mut static_methods: IndexMap<String, Gc<Method>> = defn
             .static_methods
             .iter()
             .map(|method| {
@@ -97,9 +89,9 @@ impl Class {
                 let method = Method {
                     kind,
                     signature: signature.clone(),
-                    holder: Rc::downgrade(&static_class),
+                    holder: Some(static_class),
                 };
-                (signature, Rc::new(method))
+                (signature, Gc::new(method))
             })
             .collect();
 
@@ -115,13 +107,13 @@ impl Class {
                 let method = Method {
                     kind: MethodKind::Primitive(*primitive),
                     signature: signature.to_string(),
-                    holder: Rc::downgrade(&static_class),
+                    holder: Some(static_class),
                 };
-                static_methods.insert(signature.to_string(), Rc::new(method));
+                static_methods.insert(signature.to_string(), Gc::new(method));
             }
         }
 
-        let mut instance_methods: IndexMap<String, Rc<Method>> = defn
+        let mut instance_methods: IndexMap<String, Gc<Method>> = defn
             .instance_methods
             .iter()
             .map(|method| {
@@ -133,9 +125,9 @@ impl Class {
                 let method = Method {
                     kind,
                     signature: signature.clone(),
-                    holder: Rc::downgrade(&instance_class),
+                    holder: Some(instance_class),
                 };
-                (signature, Rc::new(method))
+                (signature, Gc::new(method))
             })
             .collect();
 
@@ -151,14 +143,14 @@ impl Class {
                 let method = Method {
                     kind: MethodKind::Primitive(*primitive),
                     signature: signature.to_string(),
-                    holder: Rc::downgrade(&instance_class),
+                    holder: Some(instance_class),
                 };
-                instance_methods.insert(signature.to_string(), Rc::new(method));
+                instance_methods.insert(signature.to_string(), Gc::new(method));
             }
         }
 
-        static_class.borrow_mut().methods = static_methods;
-        instance_class.borrow_mut().methods = instance_methods;
+        static_class.borrow_mut().methods = unsafe { FinalizeUnchecked::new(static_methods) };
+        instance_class.borrow_mut().methods = unsafe { FinalizeUnchecked::new(instance_methods) };
 
         Ok(instance_class)
     }
@@ -170,43 +162,36 @@ impl Class {
 
     /// Get the class of this class.
     pub fn class(&self) -> SOMRef<Self> {
-        match self.class {
-            MaybeWeak::Weak(ref weak) => weak.upgrade().unwrap_or_else(|| {
-                panic!("superclass dropped, cannot upgrade ref ({})", self.name())
-            }),
-            MaybeWeak::Strong(ref owned) => owned.clone(),
-        }
+        self.class.unwrap()
     }
 
     /// Set the class of this class (as a weak reference).
     pub fn set_class(&mut self, class: &SOMRef<Self>) {
-        self.class = MaybeWeak::Weak(Rc::downgrade(class));
+        self.class = Some(*class);
     }
 
     /// Set the class of this class (as a strong reference).
     pub fn set_class_owned(&mut self, class: &SOMRef<Self>) {
-        self.class = MaybeWeak::Strong(class.clone());
+        self.class = Some(*class);
     }
 
     /// Get the superclass of this class.
     pub fn super_class(&self) -> Option<SOMRef<Self>> {
-        self.super_class.upgrade()
+        self.super_class
     }
 
     /// Set the superclass of this class (as a weak reference).
     pub fn set_super_class(&mut self, class: &SOMRef<Self>) {
-        self.super_class = Rc::downgrade(class);
+        self.super_class = Some(*class);
     }
 
     /// Search for a given method within this class.
-    pub fn lookup_method(&self, signature: impl AsRef<str>) -> Option<Rc<Method>> {
+    pub fn lookup_method(&self, signature: impl AsRef<str>) -> Option<Gc<Method>> {
         let signature = signature.as_ref();
-        self.methods.get(signature).cloned().or_else(|| {
-            self.super_class
-                .upgrade()?
-                .borrow()
-                .lookup_method(signature)
-        })
+        self.methods
+            .get(signature)
+            .cloned()
+            .or_else(|| self.super_class.unwrap().borrow().lookup_method(signature))
     }
 
     /// Search for a local binding.
diff --git a/som-interpreter-ast/src/evaluate.rs b/som-interpreter-ast/src/evaluate.rs
index d55aa22..ee69cda 100644
--- a/som-interpreter-ast/src/evaluate.rs
+++ b/som-interpreter-ast/src/evaluate.rs
@@ -1,5 +1,5 @@
 use std::cell::RefCell;
-use std::rc::Rc;
+use std::gc::Gc;
 
 use som_core::ast;
 
@@ -45,7 +45,7 @@ impl Evaluate for ast::Expression {
                     .frames
                     .iter()
                     .rev()
-                    .any(|live_frame| Rc::ptr_eq(&live_frame, &frame));
+                    .any(|live_frame| Gc::ptr_eq(&live_frame, &frame));
                 if has_not_escaped {
                     Return::NonLocal(value, frame)
                 } else {
@@ -145,7 +145,7 @@ impl Evaluate for ast::Literal {
                     let value = propagate!(literal.evaluate(universe));
                     output.push(value);
                 }
-                Return::Local(Value::Array(Rc::new(RefCell::new(output))))
+                Return::Local(Value::Array(Gc::new(RefCell::new(output))))
             }
             Self::Integer(int) => Return::Local(Value::Integer(*int)),
             Self::BigInteger(int) => match int.parse() {
@@ -154,7 +154,7 @@ impl Evaluate for ast::Literal {
             },
             Self::Double(double) => Return::Local(Value::Double(*double)),
             Self::Symbol(sym) => Return::Local(Value::Symbol(universe.intern_symbol(sym))),
-            Self::String(string) => Return::Local(Value::String(Rc::new(string.clone()))),
+            Self::String(string) => Return::Local(Value::String(Gc::new(string.clone()))),
         }
     }
 }
@@ -169,7 +169,7 @@ impl Evaluate for ast::Block {
     fn evaluate(&self, universe: &mut Universe) -> Return {
         let frame = universe.current_frame();
         // TODO: avoid cloning the whole block's AST.
-        Return::Local(Value::Block(Rc::new(Block {
+        Return::Local(Value::Block(Gc::new(Block {
             block: self.clone(),
             frame: frame.clone(),
         })))
diff --git a/som-interpreter-ast/src/frame.rs b/som-interpreter-ast/src/frame.rs
index d154418..5d7f05e 100644
--- a/som-interpreter-ast/src/frame.rs
+++ b/som-interpreter-ast/src/frame.rs
@@ -1,5 +1,5 @@
 use std::collections::HashMap;
-use std::rc::Rc;
+use std::gc::Gc;
 
 use crate::block::Block;
 use crate::class::Class;
@@ -13,7 +13,7 @@ pub enum FrameKind {
     /// A frame created from a block evaluation.
     Block {
         /// The block instance for the current frame.
-        block: Rc<Block>,
+        block: Gc<Block>,
     },
     /// A frame created from a method invocation.
     Method {
diff --git a/som-interpreter-ast/src/hashcode.rs b/som-interpreter-ast/src/hashcode.rs
index f3fa5bf..3af8dfd 100644
--- a/som-interpreter-ast/src/hashcode.rs
+++ b/som-interpreter-ast/src/hashcode.rs
@@ -99,7 +99,7 @@ impl Hash for Block {
 
 impl Hash for Method {
     fn hash<H: Hasher>(&self, hasher: &mut H) {
-        if let Some(holder) = self.holder().upgrade() {
+        if let Some(holder) = self.holder() {
             holder.borrow().hash(hasher);
         } else {
             hasher.write(b"??");
diff --git a/som-interpreter-ast/src/invokable.rs b/som-interpreter-ast/src/invokable.rs
index 0538ade..4411803 100644
--- a/som-interpreter-ast/src/invokable.rs
+++ b/som-interpreter-ast/src/invokable.rs
@@ -1,4 +1,4 @@
-use std::rc::Rc;
+use std::gc::Gc;
 
 use som_core::ast;
 
@@ -44,7 +44,7 @@ impl Invoke for Method {
                     };
                     (receiver, iter.collect::<Vec<_>>())
                 };
-                let holder = match self.holder().upgrade() {
+                let holder = match self.holder() {
                     Some(holder) => holder,
                     None => {
                         return Return::Exception(
@@ -114,7 +114,7 @@ impl Invoke for ast::MethodDef {
                 loop {
                     match body.evaluate(universe) {
                         Return::NonLocal(value, frame) => {
-                            if Rc::ptr_eq(&current_frame, &frame) {
+                            if Gc::ptr_eq(&current_frame, &frame) {
                                 break Return::Local(value);
                             } else {
                                 break Return::NonLocal(value, frame);
diff --git a/som-interpreter-ast/src/lib.rs b/som-interpreter-ast/src/lib.rs
index 6556412..b20ef73 100644
--- a/som-interpreter-ast/src/lib.rs
+++ b/som-interpreter-ast/src/lib.rs
@@ -2,8 +2,14 @@
 //! This is the interpreter for the Simple Object Machine.
 //!
 
+#![feature(gc)]
+use std::gc::GcAllocator;
+
+#[global_allocator]
+static A: GcAllocator = GcAllocator;
+
 use std::cell::RefCell;
-use std::rc::{Rc, Weak};
+use std::gc::Gc;
 
 /// Facilities for manipulating blocks.
 pub mod block;
@@ -31,6 +37,4 @@ pub mod universe;
 pub mod value;
 
 /// A strong and owning reference to an object.
-pub type SOMRef<T> = Rc<RefCell<T>>;
-/// A weak reference to an object.
-pub type SOMWeakRef<T> = Weak<RefCell<T>>;
+pub type SOMRef<T> = Gc<RefCell<T>>;
diff --git a/som-interpreter-ast/src/main.rs b/som-interpreter-ast/src/main.rs
index 6658bd0..2a27b6a 100644
--- a/som-interpreter-ast/src/main.rs
+++ b/som-interpreter-ast/src/main.rs
@@ -1,10 +1,11 @@
 //!
 //! This is the interpreter for the Simple Object Machine.
 //!
+#![feature(gc)]
 #![warn(missing_docs)]
 
+use std::gc::Gc;
 use std::path::PathBuf;
-use std::rc::Rc;
 
 use anyhow::anyhow;
 use clap::Parser;
@@ -17,10 +18,6 @@ use som_interpreter_ast::invokable::Return;
 use som_interpreter_ast::universe::Universe;
 use som_interpreter_ast::value::Value;
 
-#[cfg(feature = "jemalloc")]
-#[global_allocator]
-static GLOBAL: Jemalloc = Jemalloc;
-
 #[derive(Debug, Clone, PartialEq, clap::StructOpt)]
 #[structopt(about, author)]
 struct Options {
@@ -65,7 +62,7 @@ fn main() -> anyhow::Result<()> {
 
             let args = std::iter::once(String::from(file_stem))
                 .chain(opts.args.iter().cloned())
-                .map(Rc::new)
+                .map(Gc::new)
                 .map(Value::String)
                 .collect();
 
@@ -75,7 +72,7 @@ fn main() -> anyhow::Result<()> {
 
             // let class = universe.load_class_from_path(file)?;
             // let instance = Instance::from_class(class);
-            // let instance = Value::Instance(Rc::new(RefCell::new(instance)));
+            // let instance = Value::Instance(Gc::new(RefCell::new(instance)));
 
             // let invokable = instance.lookup_method(&universe, "run").unwrap();
             // let output = invokable.invoke(&mut universe, vec![instance]);
diff --git a/som-interpreter-ast/src/method.rs b/som-interpreter-ast/src/method.rs
index 2238548..d39cf02 100644
--- a/som-interpreter-ast/src/method.rs
+++ b/som-interpreter-ast/src/method.rs
@@ -3,7 +3,7 @@ use som_core::ast;
 use crate::class::Class;
 use crate::primitives::PrimitiveFn;
 use crate::universe::Universe;
-use crate::{SOMRef, SOMWeakRef};
+use crate::SOMRef;
 
 /// The kind of a class method.
 #[derive(Clone)]
@@ -27,7 +27,7 @@ impl MethodKind {
 #[derive(Clone)]
 pub struct Method {
     pub kind: MethodKind,
-    pub holder: SOMWeakRef<Class>,
+    pub holder: Option<SOMRef<Class>>,
     pub signature: String,
 }
 
@@ -44,8 +44,8 @@ impl Method {
         &self.kind
     }
 
-    pub fn holder(&self) -> &SOMWeakRef<Class> {
-        &self.holder
+    pub fn holder(&self) -> Option<SOMRef<Class>> {
+        self.holder
     }
 
     pub fn signature(&self) -> &str {
diff --git a/som-interpreter-ast/src/primitives/array.rs b/som-interpreter-ast/src/primitives/array.rs
index 25ae7b9..207834f 100644
--- a/som-interpreter-ast/src/primitives/array.rs
+++ b/som-interpreter-ast/src/primitives/array.rs
@@ -1,6 +1,6 @@
 use std::cell::RefCell;
 use std::convert::TryFrom;
-use std::rc::Rc;
+use std::gc::Gc;
 
 use crate::expect_args;
 use crate::invokable::Return;
@@ -74,7 +74,7 @@ fn new(_: &mut Universe, args: Vec<Value>) -> Return {
     ]);
 
     match usize::try_from(count) {
-        Ok(length) => Return::Local(Value::Array(Rc::new(RefCell::new(vec![
+        Ok(length) => Return::Local(Value::Array(Gc::new(RefCell::new(vec![
             Value::Nil;
             length
         ])))),
diff --git a/som-interpreter-ast/src/primitives/class.rs b/som-interpreter-ast/src/primitives/class.rs
index f9125ff..5e1d995 100644
--- a/som-interpreter-ast/src/primitives/class.rs
+++ b/som-interpreter-ast/src/primitives/class.rs
@@ -1,5 +1,5 @@
 use std::cell::RefCell;
-use std::rc::Rc;
+use std::gc::Gc;
 
 use crate::class::Class;
 use crate::expect_args;
@@ -38,8 +38,9 @@ fn new(_: &mut Universe, args: Vec<Value>) -> Return {
     ]);
 
     let instance = Instance::from_class(class);
-    let instance = Rc::new(RefCell::new(instance));
-    Return::Local(Value::Instance(instance))
+    // let instance = Gc::new(RefCell::new(instance));
+    let instance = Gc::new(unsafe { std::gc::FinalizeUnchecked::new(RefCell::new(instance))});
+    Return::Local(Value::Instance(Gc::from_raw(&**instance)))
 }
 
 fn name(universe: &mut Universe, args: Vec<Value>) -> Return {
@@ -67,7 +68,7 @@ fn methods(_: &mut Universe, args: Vec<Value>) -> Return {
         .map(|invokable| Value::Invokable(invokable.clone()))
         .collect();
 
-    Return::Local(Value::Array(Rc::new(RefCell::new(methods))))
+    Return::Local(Value::Array(Gc::new(RefCell::new(methods))))
 }
 
 fn fields(universe: &mut Universe, args: Vec<Value>) -> Return {
@@ -94,7 +95,7 @@ fn fields(universe: &mut Universe, args: Vec<Value>) -> Return {
 
     let fields = gather_locals(universe, class);
 
-    Return::Local(Value::Array(Rc::new(RefCell::new(fields))))
+    Return::Local(Value::Array(Gc::new(RefCell::new(fields))))
 }
 
 /// Search for an instance primitive matching the given signature.
diff --git a/som-interpreter-ast/src/primitives/double.rs b/som-interpreter-ast/src/primitives/double.rs
index 1f121ef..ed64d78 100644
--- a/som-interpreter-ast/src/primitives/double.rs
+++ b/som-interpreter-ast/src/primitives/double.rs
@@ -1,4 +1,4 @@
-use std::rc::Rc;
+use std::gc::Gc;
 
 use num_traits::ToPrimitive;
 
@@ -75,7 +75,7 @@ fn as_string(_: &mut Universe, args: Vec<Value>) -> Return {
 
     let value = promote!(SIGNATURE, value);
 
-    Return::Local(Value::String(Rc::new(value.to_string())))
+    Return::Local(Value::String(Gc::new(value.to_string())))
 }
 
 fn as_integer(_: &mut Universe, args: Vec<Value>) -> Return {
diff --git a/som-interpreter-ast/src/primitives/integer.rs b/som-interpreter-ast/src/primitives/integer.rs
index c98c104..8394a2b 100644
--- a/som-interpreter-ast/src/primitives/integer.rs
+++ b/som-interpreter-ast/src/primitives/integer.rs
@@ -1,4 +1,4 @@
-use std::rc::Rc;
+use std::gc::Gc;
 
 use num_bigint::{BigInt, Sign};
 use num_traits::ToPrimitive;
@@ -81,7 +81,7 @@ fn as_string(_: &mut Universe, args: Vec<Value>) -> Return {
         _ => return Return::Exception(format!("'{}': wrong types", SIGNATURE)),
     };
 
-    Return::Local(Value::String(Rc::new(value)))
+    Return::Local(Value::String(Gc::new(value)))
 }
 
 fn as_double(_: &mut Universe, args: Vec<Value>) -> Return {
diff --git a/som-interpreter-ast/src/primitives/method.rs b/som-interpreter-ast/src/primitives/method.rs
index e87d7f6..b6262af 100644
--- a/som-interpreter-ast/src/primitives/method.rs
+++ b/som-interpreter-ast/src/primitives/method.rs
@@ -18,7 +18,7 @@ fn holder(_: &mut Universe, args: Vec<Value>) -> Return {
         Value::Invokable(invokable) => invokable,
     ]);
 
-    match invokable.holder().upgrade() {
+    match invokable.holder() {
         Some(holder) => Return::Local(Value::Class(holder)),
         None => Return::Exception(format!(
             "'{}': method sholder has been collected",
diff --git a/som-interpreter-ast/src/primitives/string.rs b/som-interpreter-ast/src/primitives/string.rs
index c9931d1..08cc74f 100644
--- a/som-interpreter-ast/src/primitives/string.rs
+++ b/som-interpreter-ast/src/primitives/string.rs
@@ -1,7 +1,7 @@
 use std::collections::hash_map::DefaultHasher;
 use std::convert::TryFrom;
+use std::gc::Gc;
 use std::hash::Hasher;
-use std::rc::Rc;
 
 use crate::expect_args;
 use crate::invokable::Return;
@@ -139,7 +139,7 @@ fn concatenate(universe: &mut Universe, args: Vec<Value>) -> Return {
         _ => return Return::Exception(format!("'{}': wrong types", SIGNATURE)),
     };
 
-    Return::Local(Value::String(Rc::new(format!("{}{}", s1, s2))))
+    Return::Local(Value::String(Gc::new(format!("{}{}", s1, s2))))
 }
 
 fn as_symbol(universe: &mut Universe, args: Vec<Value>) -> Return {
@@ -200,7 +200,7 @@ fn prim_substring_from_to(universe: &mut Universe, args: Vec<Value>) -> Return {
         (_, _, _) => return Return::Exception(format!("'{}': wrong types", SIGNATURE)),
     };
 
-    let string = Rc::new(value.chars().skip(from).take(to - from).collect());
+    let string = Gc::new(value.chars().skip(from).take(to - from).collect());
 
     Return::Local(Value::String(string))
 }
diff --git a/som-interpreter-ast/src/primitives/symbol.rs b/som-interpreter-ast/src/primitives/symbol.rs
index 626a700..057c73e 100644
--- a/som-interpreter-ast/src/primitives/symbol.rs
+++ b/som-interpreter-ast/src/primitives/symbol.rs
@@ -1,4 +1,4 @@
-use std::rc::Rc;
+use std::gc::Gc;
 
 use crate::expect_args;
 use crate::invokable::Return;
@@ -17,7 +17,7 @@ fn as_string(universe: &mut Universe, args: Vec<Value>) -> Return {
         Value::Symbol(sym) => sym,
     ]);
 
-    Return::Local(Value::String(Rc::new(
+    Return::Local(Value::String(Gc::new(
         universe.lookup_symbol(sym).to_string(),
     )))
 }
diff --git a/som-interpreter-ast/src/primitives/system.rs b/som-interpreter-ast/src/primitives/system.rs
index f7cc442..6b465e2 100644
--- a/som-interpreter-ast/src/primitives/system.rs
+++ b/som-interpreter-ast/src/primitives/system.rs
@@ -1,6 +1,6 @@
 use std::convert::TryFrom;
 use std::fs;
-use std::rc::Rc;
+use std::gc::Gc;
 
 use crate::expect_args;
 use crate::frame::FrameKind;
@@ -42,7 +42,7 @@ fn load_file(universe: &mut Universe, args: Vec<Value>) -> Return {
     };
 
     match fs::read_to_string(path) {
-        Ok(value) => Return::Local(Value::String(Rc::new(value))),
+        Ok(value) => Return::Local(Value::String(Gc::new(value))),
         Err(_) => Return::Local(Value::Nil),
     }
 }
diff --git a/som-interpreter-ast/src/universe.rs b/som-interpreter-ast/src/universe.rs
index 0b4efa6..cb6488e 100644
--- a/som-interpreter-ast/src/universe.rs
+++ b/som-interpreter-ast/src/universe.rs
@@ -2,9 +2,9 @@ use std::cell::RefCell;
 use std::collections::hash_map::Entry;
 use std::collections::HashMap;
 use std::fs;
+use std::gc::Gc;
 use std::io;
 use std::path::{Path, PathBuf};
-use std::rc::Rc;
 use std::time::Instant;
 
 use anyhow::{anyhow, Error};
@@ -468,8 +468,8 @@ impl Universe {
 impl Universe {
     /// Execute a piece of code within a new stack frame.
     pub fn with_frame<T>(&mut self, kind: FrameKind, func: impl FnOnce(&mut Self) -> T) -> T {
-        let frame = Rc::new(RefCell::new(Frame::from_kind(kind)));
-        self.frames.push(frame);
+        let frame = Gc::new(unsafe { std::gc::FinalizeUnchecked::new(RefCell::new(Frame::from_kind(kind)))});
+        self.frames.push(Gc::from_raw(&**frame));
         let ret = func(self);
         self.frames.pop();
         ret
@@ -535,7 +535,7 @@ impl Universe {
 
 impl Universe {
     /// Call `escapedBlock:` on the given value, if it is defined.
-    pub fn escaped_block(&mut self, value: Value, block: Rc<Block>) -> Option<Return> {
+    pub fn escaped_block(&mut self, value: Value, block: Gc<Block>) -> Option<Return> {
         let initialize = value.lookup_method(self, "escapedBlock:")?;
 
         Some(initialize.invoke(self, vec![value, Value::Block(block)]))
@@ -551,7 +551,7 @@ impl Universe {
         let initialize = value.lookup_method(self, "doesNotUnderstand:arguments:")?;
         let sym = self.intern_symbol(symbol.as_ref());
         let sym = Value::Symbol(sym);
-        let args = Value::Array(Rc::new(RefCell::new(args)));
+        let args = Value::Array(Gc::new(RefCell::new(args)));
 
         Some(initialize.invoke(self, vec![value, sym, args]))
     }
@@ -576,7 +576,7 @@ impl Universe {
     /// Call `System>>#initialize:` with the given name, if it is defined.
     pub fn initialize(&mut self, args: Vec<Value>) -> Option<Return> {
         let initialize = Value::System.lookup_method(self, "initialize:")?;
-        let args = Value::Array(Rc::new(RefCell::new(args)));
+        let args = Value::Array(Gc::new(RefCell::new(args)));
 
         Some(initialize.invoke(self, vec![Value::System, args]))
     }
diff --git a/som-interpreter-ast/src/value.rs b/som-interpreter-ast/src/value.rs
index bd6fa8a..19c4b8c 100644
--- a/som-interpreter-ast/src/value.rs
+++ b/som-interpreter-ast/src/value.rs
@@ -1,5 +1,5 @@
 use std::fmt;
-use std::rc::Rc;
+use std::gc::Gc;
 
 use num_bigint::BigInt;
 
@@ -29,17 +29,17 @@ pub enum Value {
     /// An interned symbol value.
     Symbol(Interned),
     /// A string value.
-    String(Rc<String>),
+    String(Gc<String>),
     /// An array of values.
     Array(SOMRef<Vec<Self>>),
     /// A block value, ready to be evaluated.
-    Block(Rc<Block>),
+    Block(Gc<Block>),
     /// A generic (non-primitive) class instance.
     Instance(SOMRef<Instance>),
     /// A bare class object.
     Class(SOMRef<Class>),
     /// A bare invokable.
-    Invokable(Rc<Method>),
+    Invokable(Gc<Method>),
 }
 
 impl Value {
@@ -68,7 +68,7 @@ impl Value {
         &self,
         universe: &Universe,
         signature: impl AsRef<str>,
-    ) -> Option<Rc<Method>> {
+    ) -> Option<Gc<Method>> {
         self.class(universe).borrow().lookup_method(signature)
     }
 
@@ -125,7 +125,6 @@ impl Value {
             Self::Class(class) => class.borrow().name().to_string(),
             Self::Invokable(invokable) => invokable
                 .holder()
-                .upgrade()
                 .map(|holder| format!("{}>>#{}", holder.borrow().name(), invokable.signature()))
                 .unwrap_or_else(|| format!("??>>#{}", invokable.signature())),
         }
@@ -147,12 +146,12 @@ impl PartialEq for Value {
                 a.eq(&BigInt::from(*b))
             }
             (Self::Symbol(a), Self::Symbol(b)) => a.eq(b),
-            (Self::String(a), Self::String(b)) => Rc::ptr_eq(a, b),
-            (Self::Array(a), Self::Array(b)) => Rc::ptr_eq(a, b),
-            (Self::Instance(a), Self::Instance(b)) => Rc::ptr_eq(a, b),
-            (Self::Class(a), Self::Class(b)) => Rc::ptr_eq(a, b),
-            (Self::Block(a), Self::Block(b)) => Rc::ptr_eq(a, b),
-            (Self::Invokable(a), Self::Invokable(b)) => Rc::ptr_eq(a, b),
+            (Self::String(a), Self::String(b)) => Gc::ptr_eq(a, b),
+            (Self::Array(a), Self::Array(b)) => Gc::ptr_eq(a, b),
+            (Self::Instance(a), Self::Instance(b)) => Gc::ptr_eq(a, b),
+            (Self::Class(a), Self::Class(b)) => Gc::ptr_eq(a, b),
+            (Self::Block(a), Self::Block(b)) => Gc::ptr_eq(a, b),
+            (Self::Invokable(a), Self::Invokable(b)) => Gc::ptr_eq(a, b),
             _ => false,
         }
     }
@@ -176,7 +175,6 @@ impl fmt::Debug for Value {
             Self::Invokable(val) => {
                 let signature = val
                     .holder()
-                    .upgrade()
                     .map(|holder| format!("{}>>#{}", holder.borrow().name(), val.signature()))
                     .unwrap_or_else(|| format!("??>>#{}", val.signature()));
                 f.debug_tuple("Invokable").field(&signature).finish()
