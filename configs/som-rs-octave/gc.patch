diff --git a/som-core/src/lib.rs b/som-core/src/lib.rs
index 2a9822d..49e302d 100644
--- a/som-core/src/lib.rs
+++ b/som-core/src/lib.rs
@@ -2,6 +2,8 @@
 //! This crate contains common types that are useful to be shared across multiple tools when manipulating SOM-related things.
 //!
 
+#![feature(gc)]
+
 /// The SOM Abstract Syntax Tree definitions.
 pub mod ast;
 /// The SOM bytecode definitions.
diff --git a/som-interpreter-ast/Cargo.toml b/som-interpreter-ast/Cargo.toml
index 5504274..643563c 100644
--- a/som-interpreter-ast/Cargo.toml
+++ b/som-interpreter-ast/Cargo.toml
@@ -7,6 +7,10 @@ edition = "2018"
 publish = false
 license = "MIT OR Apache-2.0"
 
+
+[lib]
+doctest = false
+
 [dependencies]
 # internal
 som-core = { path = "../som-core", version = "0.1.0" }
diff --git a/som-interpreter-ast/src/ast.rs b/som-interpreter-ast/src/ast.rs
index f884f8b..7724289 100644
--- a/som-interpreter-ast/src/ast.rs
+++ b/som-interpreter-ast/src/ast.rs
@@ -1,6 +1,6 @@
 use std::cell::RefCell;
 use std::fmt::{Debug, Display, Formatter};
-use std::rc::Rc;
+use std::gc::Gc as Rc;
 use indenter::indented;
 use std::fmt::Write;
 use crate::class::Class;
diff --git a/som-interpreter-ast/src/class.rs b/som-interpreter-ast/src/class.rs
index 81da5fc..9260949 100644
--- a/som-interpreter-ast/src/class.rs
+++ b/som-interpreter-ast/src/class.rs
@@ -1,6 +1,6 @@
 use std::cell::RefCell;
 use std::fmt;
-use std::rc::{Rc, Weak};
+use std::gc::Gc as Rc;
 
 use indexmap::IndexMap;
 
@@ -9,28 +9,19 @@ use som_core::ast::ClassDef;
 use crate::method::{Method, MethodKind};
 use crate::primitives;
 use crate::value::Value;
-use crate::{SOMRef, SOMWeakRef};
+use crate::SOMRef;
 use crate::compiler::AstMethodCompilerCtxt;
 
-/// A reference that may be either weak or owned/strong.
-#[derive(Debug, Clone)]
-pub enum MaybeWeak<A> {
-    /// An owned reference.
-    Strong(SOMRef<A>),
-    /// A weak reference.
-    Weak(SOMWeakRef<A>),
-}
-
 /// Represents a loaded class.
 #[derive(Clone)]
 pub struct Class {
     /// The class' name.
     pub name: String,
     /// The class of this class.
-    pub class: MaybeWeak<Class>,
+    pub class: Option<SOMRef<Class>>,
     /// The superclass of this class.
     // TODO: Should probably be `Option<SOMRef<Class>>`.
-    pub super_class: SOMWeakRef<Class>,
+    pub super_class: Option<SOMRef<Class>>,
     /// The class' fields.
     pub fields: Vec<Value>,
     /// The class' fields names.
@@ -81,8 +72,8 @@ impl Class {
 
         let static_class = Rc::new(RefCell::new(Self {
             name: format!("{} class", defn.name),
-            class: MaybeWeak::Weak(Weak::new()),
-            super_class: Weak::new(),
+            class: None,
+            super_class: None,
             fields: vec![Value::Nil; static_locals.len()],
             field_names: defn.static_locals,
             methods: IndexMap::new(),
@@ -91,8 +82,8 @@ impl Class {
 
         let instance_class = Rc::new(RefCell::new(Self {
             name: defn.name.clone(),
-            class: MaybeWeak::Strong(static_class.clone()),
-            super_class: Weak::new(),
+            class: Some(static_class),
+            super_class: None,
             fields: vec![Value::Nil; instance_locals.len()],
             field_names: defn.instance_locals,
             methods: IndexMap::new(),
@@ -110,7 +101,7 @@ impl Class {
                 let method = Method {
                     kind,
                     signature: signature.clone(),
-                    holder: Rc::downgrade(&static_class),
+                    holder: Some(static_class),
                 };
                 (signature, Rc::new(RefCell::new(method)))
             })
@@ -128,7 +119,7 @@ impl Class {
                 let method = Method {
                     kind: MethodKind::Primitive(*primitive),
                     signature: signature.to_string(),
-                    holder: Rc::downgrade(&static_class),
+                    holder: Some(static_class),
                 };
                 static_methods.insert(signature.to_string(), Rc::new(RefCell::new(method)));
             }
@@ -143,7 +134,7 @@ impl Class {
                 let method = Method {
                     kind,
                     signature: signature.clone(),
-                    holder: Rc::downgrade(&instance_class),
+                    holder: Some(instance_class),
                 };
                 (signature, Rc::new(RefCell::new(method)))
             })
@@ -161,7 +152,7 @@ impl Class {
                 let method = Method {
                     kind: MethodKind::Primitive(*primitive),
                     signature: signature.to_string(),
-                    holder: Rc::downgrade(&instance_class),
+                    holder: Some(instance_class),
                 };
                 instance_methods.insert(signature.to_string(), Rc::new(RefCell::new(method)));
             }
@@ -180,27 +171,22 @@ impl Class {
 
     /// Get the class of this class.
     pub fn class(&self) -> SOMRef<Self> {
-        match self.class {
-            MaybeWeak::Weak(ref weak) => weak.upgrade().unwrap_or_else(|| {
-                panic!("superclass dropped, cannot upgrade ref ({})", self.name())
-            }),
-            MaybeWeak::Strong(ref owned) => owned.clone(),
-        }
+        self.class.unwrap()
     }
 
     /// Set the class of this class (as a weak reference).
     pub fn set_class(&mut self, class: &SOMRef<Self>) {
-        self.class = MaybeWeak::Weak(Rc::downgrade(class));
+        self.class = Some(*class);
     }
 
     /// Set the class of this class (as a strong reference).
     pub fn set_class_owned(&mut self, class: &SOMRef<Self>) {
-        self.class = MaybeWeak::Strong(class.clone());
+        self.class = Some(*class);
     }
 
     /// Get the superclass of this class.
     pub fn super_class(&self) -> Option<SOMRef<Self>> {
-        self.super_class.upgrade()
+        self.super_class
     }
 
     /// Set the superclass of this class (as a weak reference).
@@ -212,7 +198,7 @@ impl Class {
             self.fields.insert(0, local.clone());
         }
 
-        self.super_class = Rc::downgrade(class);
+        self.super_class = Some(*class)
     }
 
     /// Search for a given method within this class.
@@ -220,7 +206,7 @@ impl Class {
         let signature = signature.as_ref();
         self.methods.get(signature).cloned().or_else(|| {
             self.super_class
-                .upgrade()?
+                .unwrap()
                 .borrow()
                 .lookup_method(signature)
         })
diff --git a/som-interpreter-ast/src/compiler.rs b/som-interpreter-ast/src/compiler.rs
index 2cd535a..31f2b8a 100644
--- a/som-interpreter-ast/src/compiler.rs
+++ b/som-interpreter-ast/src/compiler.rs
@@ -1,5 +1,5 @@
 use std::cell::RefCell;
-use std::rc::Rc;
+use std::gc::Gc as Rc;
 
 use som_core::ast;
 use som_core::ast::{Expression, MethodBody};
@@ -257,4 +257,4 @@ impl AstMethodCompilerCtxt {
             }
         }
     }
-}
\ No newline at end of file
+}
diff --git a/som-interpreter-ast/src/evaluate.rs b/som-interpreter-ast/src/evaluate.rs
index 7019511..f5a27d5 100644
--- a/som-interpreter-ast/src/evaluate.rs
+++ b/som-interpreter-ast/src/evaluate.rs
@@ -1,5 +1,5 @@
 use std::cell::RefCell;
-use std::rc::Rc;
+use std::gc::Gc as Rc;
 
 use crate::ast::{AstBinaryDispatch, AstBlock, AstBody, AstDispatchNode, AstExpression, AstMethodDef, AstNAryDispatch, AstSuperMessage, AstTerm, AstTernaryDispatch, AstUnaryDispatch, InlinedNode};
 use som_core::ast;
@@ -345,4 +345,4 @@ impl Evaluate for Rc<RefCell<Block>> {
         unsafe { (*(*self.as_ptr()).block.as_ptr()).body.evaluate(universe) }
         // self.borrow_mut().block.borrow_mut().body.evaluate(universe)
     }
-}
\ No newline at end of file
+}
diff --git a/som-interpreter-ast/src/frame.rs b/som-interpreter-ast/src/frame.rs
index b808c77..c0c5bab 100644
--- a/som-interpreter-ast/src/frame.rs
+++ b/som-interpreter-ast/src/frame.rs
@@ -1,5 +1,5 @@
 use std::cell::{RefCell};
-use std::rc::Rc;
+use std::gc::Gc as Rc;
 use std::vec;
 
 use crate::value::Value;
@@ -178,4 +178,4 @@ impl Frame {
             Rc::clone(frame)
         }
     }
-}
\ No newline at end of file
+}
diff --git a/som-interpreter-ast/src/hashcode.rs b/som-interpreter-ast/src/hashcode.rs
index cc707d6..56e6727 100644
--- a/som-interpreter-ast/src/hashcode.rs
+++ b/som-interpreter-ast/src/hashcode.rs
@@ -93,7 +93,7 @@ impl Hash for Block {
 
 impl Hash for Method {
     fn hash<H: Hasher>(&self, hasher: &mut H) {
-        if let Some(holder) = self.holder().upgrade() {
+        if let Some(holder) = self.holder() {
             holder.borrow().hash(hasher);
         } else {
             hasher.write(b"??");
diff --git a/som-interpreter-ast/src/inliner.rs b/som-interpreter-ast/src/inliner.rs
index f543572..471e20f 100644
--- a/som-interpreter-ast/src/inliner.rs
+++ b/som-interpreter-ast/src/inliner.rs
@@ -1,5 +1,5 @@
 use std::cell::RefCell;
-use std::rc::Rc;
+use std::gc::Gc as Rc;
 
 use som_core::ast;
 use som_core::ast::{Block, Expression};
@@ -263,4 +263,4 @@ impl PrimMessageInliner for AstMethodCompilerCtxt {
 
         Some(InlinedNode::AndInlined(and_inlined_node))
     }
-}
\ No newline at end of file
+}
diff --git a/som-interpreter-ast/src/lib.rs b/som-interpreter-ast/src/lib.rs
index 60acd5e..b7e2f01 100644
--- a/som-interpreter-ast/src/lib.rs
+++ b/som-interpreter-ast/src/lib.rs
@@ -2,8 +2,15 @@
 //! This is the interpreter for the Simple Object Machine.
 //!
 
+#![feature(gc)]
+
 use std::cell::RefCell;
-use std::rc::{Rc, Weak};
+use std::gc::Gc as Rc;
+
+use std::gc::GcAllocator;
+
+#[global_allocator]
+static A: GcAllocator = GcAllocator;
 
 macro_rules! propagate {
     ($expr:expr) => {
@@ -51,5 +58,3 @@ pub mod specialized;
 
 /// A strong and owning reference to an object.
 pub type SOMRef<T> = Rc<RefCell<T>>;
-/// A weak reference to an object.
-pub type SOMWeakRef<T> = Weak<RefCell<T>>;
diff --git a/som-interpreter-ast/src/main.rs b/som-interpreter-ast/src/main.rs
index 16e7d05..d3abfac 100644
--- a/som-interpreter-ast/src/main.rs
+++ b/som-interpreter-ast/src/main.rs
@@ -2,9 +2,10 @@
 //! This is the interpreter for the Simple Object Machine.
 //!
 #![warn(missing_docs)]
+#![feature(gc)]
 
 use std::path::PathBuf;
-use std::rc::Rc;
+use std::gc::Gc as Rc;
 
 use anyhow::anyhow;
 #[cfg(feature = "jemalloc")]
diff --git a/som-interpreter-ast/src/method.rs b/som-interpreter-ast/src/method.rs
index e19c5ef..a5c9667 100644
--- a/som-interpreter-ast/src/method.rs
+++ b/som-interpreter-ast/src/method.rs
@@ -1,7 +1,7 @@
 use crate::class::Class;
 use crate::primitives::PrimitiveFn;
 use crate::universe::UniverseAST;
-use crate::{SOMRef, SOMWeakRef};
+use crate::SOMRef;
 use crate::ast::AstMethodDef;
 use crate::specialized::down_to_do_node::DownToDoNode;
 use crate::specialized::while_node::WhileNode;
@@ -61,13 +61,13 @@ impl MethodKind {
 #[derive(Debug, Clone)]
 pub struct Method {
     pub kind: MethodKind,
-    pub holder: SOMWeakRef<Class>,
+    pub holder: Option<SOMRef<Class>>,
     pub signature: String,
 }
 
 impl PartialEq for Method {
     fn eq(&self, other: &Self) -> bool {
-        self.kind == other.kind && self.signature == other.signature && std::ptr::eq(self.holder.as_ptr(), other.holder.as_ptr()) 
+        self.kind == other.kind && self.signature == other.signature && std::ptr::eq(self.holder.unwrap().as_ptr(), other.holder.unwrap().as_ptr()) 
     }
 }
 
@@ -84,8 +84,8 @@ impl Method {
         &self.kind
     }
 
-    pub fn holder(&self) -> &SOMWeakRef<Class> {
-        &self.holder
+    pub fn holder(&self) -> Option<SOMRef<Class>> {
+        self.holder
     }
 
     pub fn signature(&self) -> &str {
diff --git a/som-interpreter-ast/src/primitives/array.rs b/som-interpreter-ast/src/primitives/array.rs
index 05f3a99..c89a89e 100644
--- a/som-interpreter-ast/src/primitives/array.rs
+++ b/som-interpreter-ast/src/primitives/array.rs
@@ -1,6 +1,6 @@
 use std::cell::RefCell;
 use std::convert::TryFrom;
-use std::rc::Rc;
+use std::gc::Gc as Rc;
 
 use crate::expect_args;
 use crate::invokable::Return;
diff --git a/som-interpreter-ast/src/primitives/class.rs b/som-interpreter-ast/src/primitives/class.rs
index c81e4c1..3353b20 100644
--- a/som-interpreter-ast/src/primitives/class.rs
+++ b/som-interpreter-ast/src/primitives/class.rs
@@ -1,5 +1,5 @@
 use std::cell::RefCell;
-use std::rc::Rc;
+use std::gc::Gc as Rc;
 
 use crate::expect_args;
 use crate::instance::Instance;
diff --git a/som-interpreter-ast/src/primitives/double.rs b/som-interpreter-ast/src/primitives/double.rs
index 269c359..ca984b2 100644
--- a/som-interpreter-ast/src/primitives/double.rs
+++ b/som-interpreter-ast/src/primitives/double.rs
@@ -1,4 +1,4 @@
-use std::rc::Rc;
+use std::gc::Gc as Rc;
 
 use num_traits::ToPrimitive;
 
diff --git a/som-interpreter-ast/src/primitives/integer.rs b/som-interpreter-ast/src/primitives/integer.rs
index ec991d3..5f88004 100644
--- a/som-interpreter-ast/src/primitives/integer.rs
+++ b/som-interpreter-ast/src/primitives/integer.rs
@@ -1,4 +1,4 @@
-use std::rc::Rc;
+use std::gc::Gc as Rc;
 
 use num_bigint::{BigInt, Sign};
 use num_traits::ToPrimitive;
diff --git a/som-interpreter-ast/src/primitives/method.rs b/som-interpreter-ast/src/primitives/method.rs
index 71d8438..f5617c7 100644
--- a/som-interpreter-ast/src/primitives/method.rs
+++ b/som-interpreter-ast/src/primitives/method.rs
@@ -18,7 +18,7 @@ fn holder(_: &mut UniverseAST, args: Vec<Value>) -> Return {
         Value::Invokable(invokable) => invokable,
     ]);
 
-    let maybe_holder = invokable.borrow().holder().upgrade();
+    let maybe_holder = invokable.borrow().holder();
     match maybe_holder {
         Some(holder) => Return::Local(Value::Class(holder)),
         None => Return::Exception(format!(
diff --git a/som-interpreter-ast/src/primitives/string.rs b/som-interpreter-ast/src/primitives/string.rs
index 8ae4057..175a2e7 100644
--- a/som-interpreter-ast/src/primitives/string.rs
+++ b/som-interpreter-ast/src/primitives/string.rs
@@ -1,7 +1,7 @@
 use std::collections::hash_map::DefaultHasher;
 use std::convert::TryFrom;
+use std::gc::Gc as Rc;
 use std::hash::Hasher;
-use std::rc::Rc;
 
 use crate::expect_args;
 use crate::invokable::Return;
diff --git a/som-interpreter-ast/src/primitives/symbol.rs b/som-interpreter-ast/src/primitives/symbol.rs
index b8de69e..4aa1c46 100644
--- a/som-interpreter-ast/src/primitives/symbol.rs
+++ b/som-interpreter-ast/src/primitives/symbol.rs
@@ -1,4 +1,4 @@
-use std::rc::Rc;
+use std::gc::Gc as Rc;
 
 use crate::expect_args;
 use crate::invokable::Return;
diff --git a/som-interpreter-ast/src/primitives/system.rs b/som-interpreter-ast/src/primitives/system.rs
index 7fe0f19..0a6a515 100644
--- a/som-interpreter-ast/src/primitives/system.rs
+++ b/som-interpreter-ast/src/primitives/system.rs
@@ -1,6 +1,6 @@
 use std::convert::TryFrom;
 use std::fs;
-use std::rc::Rc;
+use std::gc::Gc as Rc;
 
 use crate::expect_args;
 use crate::invokable::Return;
diff --git a/som-interpreter-ast/src/specialized/down_to_do_node.rs b/som-interpreter-ast/src/specialized/down_to_do_node.rs
index b8d1988..2ecea96 100644
--- a/som-interpreter-ast/src/specialized/down_to_do_node.rs
+++ b/som-interpreter-ast/src/specialized/down_to_do_node.rs
@@ -34,7 +34,7 @@ impl DownToDoNode {
         while i >= end_int {
             propagate!(universe.with_frame(
                 nbr_locals,
-                vec![Value::Block(Rc::clone(&body_block)), Value::Integer(i)],
+                vec![Value::Block(body_block), Value::Integer(i)],
                 |universe| body_block.evaluate(universe),
             ));
             i -= 1;
@@ -48,11 +48,11 @@ impl DownToDoNode {
         while i >= end_double {
             propagate!(universe.with_frame(
                 nbr_locals,
-                vec![Value::Block(Rc::clone(&body_block)), Value::Double(i)],
+                vec![Value::Block(body_block), Value::Double(i)],
                 |universe| body_block.evaluate(universe),
             ));
             i -= 1.0;
         }
         Return::Local(Value::Double(start_double))
     }
-}
\ No newline at end of file
+}
diff --git a/som-interpreter-ast/src/specialized/if_node.rs b/som-interpreter-ast/src/specialized/if_node.rs
index 106fd43..eac93bc 100644
--- a/som-interpreter-ast/src/specialized/if_node.rs
+++ b/som-interpreter-ast/src/specialized/if_node.rs
@@ -1,4 +1,4 @@
-use std::rc::Rc;
+use std::gc::Gc as Rc;
 use crate::evaluate::Evaluate;
 use crate::invokable::{Invoke, Return};
 use crate::universe::UniverseAST;
@@ -36,4 +36,4 @@ impl Invoke for IfNode {
             )
         }
     }
-}
\ No newline at end of file
+}
diff --git a/som-interpreter-ast/src/specialized/if_true_if_false_node.rs b/som-interpreter-ast/src/specialized/if_true_if_false_node.rs
index 34b9f10..a5732cd 100644
--- a/som-interpreter-ast/src/specialized/if_true_if_false_node.rs
+++ b/som-interpreter-ast/src/specialized/if_true_if_false_node.rs
@@ -1,4 +1,4 @@
-use std::rc::Rc;
+use std::gc::Gc as Rc;
 use crate::evaluate::Evaluate;
 use crate::invokable::{Invoke, Return};
 use crate::universe::UniverseAST;
@@ -42,4 +42,4 @@ impl Invoke for IfTrueIfFalseNode {
             a => Return::Local(a.clone()),
         }
     }
-}
\ No newline at end of file
+}
diff --git a/som-interpreter-ast/src/specialized/to_by_do_node.rs b/som-interpreter-ast/src/specialized/to_by_do_node.rs
index 7afd329..8ac2ecf 100644
--- a/som-interpreter-ast/src/specialized/to_by_do_node.rs
+++ b/som-interpreter-ast/src/specialized/to_by_do_node.rs
@@ -1,4 +1,4 @@
-use std::rc::Rc;
+use std::gc::Gc as Rc;
 use crate::evaluate::Evaluate;
 use crate::invokable::{Invoke, Return};
 use crate::universe::UniverseAST;
@@ -29,7 +29,7 @@ impl Invoke for ToByDoNode {
         while i <= end_int {
             propagate!(universe.with_frame(
                 nbr_locals,
-                vec![Value::Block(Rc::clone(&body_block)), Value::Integer(i)],
+                vec![Value::Block(body_block), Value::Integer(i)],
                 |universe| body_block.evaluate(universe),
             ));
             i += step_int;
@@ -37,4 +37,4 @@ impl Invoke for ToByDoNode {
 
         Return::Local(Value::Integer(start_int))
     }
-}
\ No newline at end of file
+}
diff --git a/som-interpreter-ast/src/specialized/to_do_node.rs b/som-interpreter-ast/src/specialized/to_do_node.rs
index a42c91a..900d3c6 100644
--- a/som-interpreter-ast/src/specialized/to_do_node.rs
+++ b/som-interpreter-ast/src/specialized/to_do_node.rs
@@ -1,4 +1,4 @@
-use std::rc::Rc;
+use std::gc::Gc as Rc;
 use crate::block::Block;
 use crate::evaluate::Evaluate;
 use crate::invokable::{Invoke, Return};
@@ -33,7 +33,7 @@ impl ToDoNode {
         for i in start_int..=end_int {
             propagate!(universe.with_frame(
                 nbr_locals,
-                vec![Value::Block(Rc::clone(&body_block)), Value::Integer(i)],
+                vec![Value::Block(body_block), Value::Integer(i)],
                 |universe| body_block.evaluate(universe),
             ));
         }
@@ -47,7 +47,7 @@ impl ToDoNode {
         while i <= end_double {
             propagate!(universe.with_frame(
                 nbr_locals,
-                vec![Value::Block(Rc::clone(&body_block)), Value::Double(i)],
+                vec![Value::Block(body_block), Value::Double(i)],
                 |universe| body_block.evaluate(universe),
             ));
             i += 1.0
@@ -55,4 +55,4 @@ impl ToDoNode {
 
         Return::Local(Value::Double(start_double))
     }
-}
\ No newline at end of file
+}
diff --git a/som-interpreter-ast/src/specialized/trivial_methods.rs b/som-interpreter-ast/src/specialized/trivial_methods.rs
index e22580b..3a85c21 100644
--- a/som-interpreter-ast/src/specialized/trivial_methods.rs
+++ b/som-interpreter-ast/src/specialized/trivial_methods.rs
@@ -3,7 +3,7 @@ use crate::invokable::{Invoke, Return};
 use crate::universe::UniverseAST;
 use crate::value::Value;
 use som_core::ast::Literal;
-use std::rc::Rc;
+use std::gc::Gc as Rc;
 
 #[derive(Debug, Clone, PartialEq)]
 pub struct TrivialLiteralMethod {
@@ -73,4 +73,4 @@ impl Invoke for TrivialSetterMethod {
             _ => panic!("trivial getter not called on a class/instance?")
         }
     }
-}
\ No newline at end of file
+}
diff --git a/som-interpreter-ast/src/specialized/while_node.rs b/som-interpreter-ast/src/specialized/while_node.rs
index 71f0bb0..5ad109a 100644
--- a/som-interpreter-ast/src/specialized/while_node.rs
+++ b/som-interpreter-ast/src/specialized/while_node.rs
@@ -1,4 +1,4 @@
-use std::rc::Rc;
+use std::gc::Gc as Rc;
 use crate::evaluate::Evaluate;
 use crate::invokable::{Invoke, Return};
 use crate::universe::UniverseAST;
@@ -51,4 +51,4 @@ impl Invoke for WhileNode {
             }
         }
     }
-}
\ No newline at end of file
+}
diff --git a/som-interpreter-ast/src/universe.rs b/som-interpreter-ast/src/universe.rs
index 2d604bd..77efd65 100644
--- a/som-interpreter-ast/src/universe.rs
+++ b/som-interpreter-ast/src/universe.rs
@@ -3,7 +3,7 @@ use std::collections::HashMap;
 use std::fs;
 use std::io;
 use std::path::{Path, PathBuf};
-use std::rc::Rc;
+use std::gc::Gc as Rc;
 use std::time::Instant;
 
 use anyhow::{anyhow, Error};
diff --git a/som-interpreter-ast/src/value.rs b/som-interpreter-ast/src/value.rs
index 88e29e9..f4a4c4a 100644
--- a/som-interpreter-ast/src/value.rs
+++ b/som-interpreter-ast/src/value.rs
@@ -1,5 +1,5 @@
 use std::fmt;
-use std::rc::Rc;
+use std::gc::Gc as Rc;
 
 use num_bigint::BigInt;
 
@@ -107,7 +107,6 @@ impl Value {
             Self::Class(class) => class.borrow().name().to_string(),
             Self::Invokable(invokable) => invokable.borrow()
                 .holder()
-                .upgrade()
                 .map(|holder| format!("{}>>#{}", holder.borrow().name(), invokable.borrow().signature()))
                 .unwrap_or_else(|| format!("??>>#{}", invokable.borrow().signature())),
         }
@@ -158,7 +157,6 @@ impl fmt::Debug for Value {
             Self::Invokable(val) => {
                 let signature = val.borrow()
                     .holder()
-                    .upgrade()
                     .map(|holder| format!("{}>>#{}", holder.borrow().name(), val.borrow().signature()))
                     .unwrap_or_else(|| format!("??>>#{}", val.borrow().signature()));
                 f.debug_tuple("Invokable").field(&signature).finish()
